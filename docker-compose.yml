version: "4.0"

services:
  # Database service
  db:
    image: ankane/pgvector  # Use pgvector image for PostgreSQL with vector support
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}  # Database name
      POSTGRES_USER: ${POSTGRES_USER}  # Database user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Database password
    ports:
      - "${POSTGRES_PORT}:5432"  # Map PostgreSQL port to host
    volumes:
      - db_data:/var/lib/postgresql/data  # Persist database data
#      - ./vectorstore.sql:/docker-entrypoint-initdb.d/vectorstore.sql  # Additional SQL script for vector data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]  # Check database readiness
      interval: 30s
      timeout: 30s
      retries: 3

  # Django application service
  django:
    build: ./django  # Specify the build context as the directory containing the Dockerfile
    ports:
      - "8000:8000"  # Expose Django on port 8080
    depends_on:
      db:
        condition: service_healthy  # Ensure the database is ready before starting Django
    volumes:
      - ./django:/app  # Mount the Django project directory into the container
    env_file:
      - .env  # Use an environment file for Django configuration
    environment:
      LANGCHAIN_TRACING_V2: "true"
      LANGCHAIN_ENDPOINT: "https://api.smith.langchain.com"
      LANGCHAIN_API_KEY: ${LANGCHAIN_API_KEY}
      LANGCHAIN_PROJECT: "Stubu"

  # Frontend service
  frontend:
    build: ./angular  # Specify the build context for the Angular frontend
    ports:
      - "80:80"  # Map HTTP port
      - "443:443"  # Map HTTPS port
    depends_on:
      - django  # Ensure Django backend is ready before starting the frontend
    volumes:
      - ./angular:/usyr/src/app  # Mount the Angular project directory into the container

volumes:
  db_data:  # Named volume for database persistence
  static_volume:  # Named volume for Django static files
  media_volume:  # Named volume for Django media files

